plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	id "org.jlleitschuh.gradle.ktlint" version "12.1.1"
	id 'jacoco'
}

group = 'org.gudelker'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/grupo6-ingsis/printscript2")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}
ext {
    gudelkerVersion = '1.2.51' // Change here only
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.gudelker:ast:$gudelkerVersion"
    implementation "org.gudelker:lexer:$gudelkerVersion"
    implementation "org.gudelker:parser:$gudelkerVersion"
    implementation "org.gudelker:interpreter:$gudelkerVersion"
    implementation "org.gudelker:formatter:$gudelkerVersion"
    implementation "org.gudelker:analyzer:$gudelkerVersion"
    implementation "org.gudelker:token:$gudelkerVersion"
    implementation "org.gudelker:utilities:$gudelkerVersion"
    implementation "org.gudelker:cli:$gudelkerVersion"
    implementation "org.gudelker:common:$gudelkerVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'com.h2database:h2'

}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
	useJUnitPlatform()
}
jacoco {
	toolVersion = "0.8.11"
}

tasks.withType(Test) {
	finalizedBy jacocoTestReport
}

tasks.withType(JacocoReport) {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/model/**',
					'**/config/**',
					'**/*Main*.*',
					'**/*Main$*.*',
			])
		}))
	}
}

tasks.withType(JacocoCoverageVerification) {
	violationRules {
		rule {
			limit {
				minimum = 0.01
			}
		}
		rule {
			element = 'CLASS'
			excludes = ['**/model/**', '**/config/**', '**/*Main*']
			limit {
				minimum = 0.0
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification

